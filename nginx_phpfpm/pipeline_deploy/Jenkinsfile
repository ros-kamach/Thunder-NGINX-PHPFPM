properties(
    [[$class: 'BuildDiscarderProperty',strategy: 
     [$class: 'LogRotator', numToKeepStr: '10']],
      pipelineTriggers([pollSCM('H/2 * * * *', ignorePostCommitHooks: true)]),]
)
pipeline {
    agent any
    stages {
        stage('Build_Thunder_Image') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withCredentials() {
                            openshift.withProject() {
                                checkout([$class           : 'GitSCM',
                                            branches         : [[name: "*/${PS_GIT_REF}"]],
                                            userRemoteConfigs: [[url: "${PS_GIT_URI}"]]
                                ]);
                             }
                         }
                     }
                 } 
                openshiftBuild(namespace: '${JENKINS_PROJECT_NAME}', bldCfg: 'thunder-alpine', showBuildLogs: 'true')
            }
        }
        stage('Approve Deployment') {
            steps {
                input message: 'Deploy Thunder APP?',
                id: 'approval'
            } 
        } 
        stage('Deploy_Thunder') {
            steps {
                openshiftDeploy(namespace: '${THUNDER_PROJECT_NAME}', depCfg: 'thunder-deployment', waitTime: '3000000')
                echo "hello world"
                sh 'curl -s ${SCRIPT_LINK} | bash -s 20 ${THUNDER_HOST_NAME}/user/login'
            }
        }
    }
}
